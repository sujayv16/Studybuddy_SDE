#!/usr/bin/env node

/**
 * Module dependencies.
 */

const { Server } = require('socket.io');
var app = require('../app');

/** @type { Server } */
var io = require('../io');

var debug = require('debug')('backend:server');
var http = require('http');

// Initialize database connection
const { connectDB } = require('../db-simple');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Initialize database and start server
 */

async function startServer() {
  try {
    // Initialize database connection
    const connected = await connectDB();
    
    if (connected) {
      console.log('🚀 Starting server with database connection...');
    } else {
      console.log('⚠️ Starting server without database connection...');
    }
    
    // Start the server
    server.listen(port);
    io.attach(server); // socket.io needs this server object
    server.on('error', onError);
    server.on('listening', onListening);
    
  } catch (error) {
    console.error('❌ Failed to start server:', error.message);
    console.log('🔄 Starting server anyway...');
    
    // Start server anyway for testing
    server.listen(port);
    io.attach(server);
    server.on('error', onError);
    server.on('listening', onListening);
  }
}

// Start the server
startServer();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
